; ModuleID = '0x201__M'
source_filename = "/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move"
target datalayout = "e-m:e-p:64:64-i64:64-n32:64-S128"
target triple = "sbf-solana-solana"

%struct.M__MyStruct_2 = type { i32, %struct.M__MyStruct }
%struct.M__MyStruct = type { i32, i1, %struct.M__EmptyStruct, i8, %struct.M__Combined }
%struct.M__EmptyStruct = type { i1 }
%struct.M__Combined = type { i1, %struct.M__U64Struct }
%struct.M__U64Struct = type { i64 }

declare i32 @memcmp(ptr, ptr, i64)

define %struct.M__MyStruct_2 @"0000000000000201_M_fun_2_2AUudfp1Qwf7h7"(i32 %par_1_u32) !dbg !2 {
entry:
  %local_0 = alloca i32, align 4
  %local_1__field1_u32 = alloca i32, align 4
  %local_2 = alloca i8, align 1
  %local_3 = alloca i1, align 1
  %local_4__other_my_struct_from_101 = alloca %struct.M__MyStruct, align 8
  %local_5 = alloca %struct.M__MyStruct_2, align 8
  store i32 %par_1_u32, ptr %local_0, align 4
  %load_store_tmp = load i32, ptr %local_0, align 4, !dbg !40
  store i32 %load_store_tmp, ptr %local_1__field1_u32, align 4, !dbg !40
  call void @llvm.dbg.declare(metadata ptr %local_0, metadata !41, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.declare(metadata ptr %local_1__field1_u32, metadata !43, metadata !DIExpression()), !dbg !40
  store i8 7, ptr %local_2, align 1
  store i1 true, ptr %local_3, align 1
  %call_arg_0 = load i8, ptr %local_2, align 1
  %call_arg_1 = load i1, ptr %local_3, align 1
  %retval = call %struct.M__MyStruct @"0000000000000101_M_fun_1_AcLtMspYikxikv"(i8 %call_arg_0, i1 %call_arg_1), !dbg !45
  store %struct.M__MyStruct %retval, ptr %local_4__other_my_struct_from_101, align 8
  %fv.0 = load i32, ptr %local_1__field1_u32, align 4
  %fv.1 = load %struct.M__MyStruct, ptr %local_4__other_my_struct_from_101, align 8
  %insert_0 = insertvalue %struct.M__MyStruct_2 undef, i32 %fv.0, 0
  %insert_1 = insertvalue %struct.M__MyStruct_2 %insert_0, %struct.M__MyStruct %fv.1, 1
  store %struct.M__MyStruct_2 %insert_1, ptr %local_5, align 8
  %retval1 = load %struct.M__MyStruct_2, ptr %local_5, align 8
  ret %struct.M__MyStruct_2 %retval1
}

declare %struct.M__MyStruct @"0000000000000101_M_fun_1_AcLtMspYikxikv"(i8, i1)

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!fun_2 = !{!2, !7, !8, !9}
!struct.M__MyStruct_2 = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !1, producer: "move-mv-llvm-compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!1 = !DIFile(filename: "dwarf-functions.move", directory: "/language/tools/move-mv-llvm-compiler/tests/dwarf-tests")
!2 = distinct !DISubprogram(name: "fun_2", linkageName: "fun_2", scope: !1, file: !1, line: 7, type: !3, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !6)
!3 = !DISubroutineType(types: !4)
!4 = !{!5}
!5 = !DIBasicType(name: "u32", size: 32)
!6 = !{}
!7 = distinct !DILexicalBlock(scope: !2, file: !1, line: 5)
!8 = !DINamespace(name: "fun_2", scope: !1)
!9 = !DILocation(line: 7, column: 4, scope: !7)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "struct.M__MyStruct_2__ptr", baseType: !11, size: 64, align: 64, dwarfAddressSpace: 0)
!11 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__MyStruct_2", scope: !12, file: !1, line: 2, size: 256, align: 8, flags: DIFlagObjcClassComplete, elements: !13)
!12 = !DINamespace(name: "struct.M__MyStruct_2", scope: !1)
!13 = !{!14, !15}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "field1_u32", scope: !12, file: !1, line: 2, baseType: !5, size: 32, align: 32)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "other_my_struct_from_101", scope: !12, file: !1, line: 3, baseType: !16, size: 192, align: 64, offset: 32)
!16 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__MyStruct", scope: !17, file: !1, line: 19, size: 192, align: 8, flags: DIFlagObjcClassComplete, elements: !18)
!17 = !DINamespace(name: "struct.M__MyStruct", scope: !1)
!18 = !{!19, !20, !22, !27, !29}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "field1_u32", scope: !17, file: !1, line: 19, baseType: !5, size: 32, align: 32)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "field2_bool", scope: !17, file: !1, line: 20, baseType: !21, size: 1, align: 8, offset: 32)
!21 = !DIBasicType(name: "bool", size: 8)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "field3_empty", scope: !17, file: !1, line: 21, baseType: !23, size: 8, align: 8, offset: 40)
!23 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__EmptyStruct", scope: !24, file: !1, line: 27, size: 8, align: 8, flags: DIFlagObjcClassComplete, elements: !25)
!24 = !DINamespace(name: "struct.M__EmptyStruct", scope: !1)
!25 = !{!26}
!26 = !DIDerivedType(tag: DW_TAG_member, name: "dummy_field", scope: !24, file: !1, line: 27, baseType: !21, size: 1, align: 8)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "field4_u8", scope: !17, file: !1, line: 22, baseType: !28, size: 8, align: 8, offset: 48)
!28 = !DIBasicType(name: "u8", size: 8)
!29 = !DIDerivedType(tag: DW_TAG_member, name: "field6_combined", scope: !17, file: !1, line: 23, baseType: !30, size: 128, align: 64, offset: 56)
!30 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__Combined", scope: !31, file: !1, line: 31, size: 128, align: 8, flags: DIFlagObjcClassComplete, elements: !32)
!31 = !DINamespace(name: "struct.M__Combined", scope: !1)
!32 = !{!33, !34}
!33 = !DIDerivedType(tag: DW_TAG_member, name: "field_combined_bool", scope: !31, file: !1, line: 31, baseType: !21, size: 1, align: 8)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "field_combined_u64_struct", scope: !31, file: !1, line: 32, baseType: !35, size: 64, align: 64, offset: 8)
!35 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__U64Struct", scope: !36, file: !1, line: 29, size: 64, align: 8, flags: DIFlagObjcClassComplete, elements: !37)
!36 = !DINamespace(name: "struct.M__U64Struct", scope: !1)
!37 = !{!38}
!38 = !DIDerivedType(tag: DW_TAG_member, name: "field_u64", scope: !36, file: !1, line: 29, baseType: !39, size: 64, align: 64)
!39 = !DIBasicType(name: "u64", size: 64)
!40 = !DILocation(line: 10, column: 25, scope: !2)
!41 = !DILocalVariable(name: "load_store_/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move_10_par_1_u32", scope: !42, file: !1, line: 10, type: !5)
!42 = distinct !DILexicalBlock(scope: !2, file: !1, line: 10, column: 25)
!43 = !DILocalVariable(name: "load_store_/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move_10_par_1_u32", scope: !44, file: !1, line: 10, type: !5)
!44 = distinct !DILexicalBlock(scope: !2, file: !1, line: 10, column: 25)
!45 = !DILocation(line: 11, column: 39, scope: !2)
