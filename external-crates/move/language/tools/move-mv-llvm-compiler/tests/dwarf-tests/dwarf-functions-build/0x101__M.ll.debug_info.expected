; ModuleID = '0x101__M'
source_filename = "/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move"
target datalayout = "e-m:e-p:64:64-i64:64-n32:64-S128"
target triple = "sbf-solana-solana"

%struct.M__MyStruct = type { i32, i1, %struct.M__EmptyStruct, i8, %struct.M__Combined }
%struct.M__EmptyStruct = type { i1 }
%struct.M__Combined = type { i1, %struct.M__U64Struct }
%struct.M__U64Struct = type { i64 }

declare i32 @memcmp(ptr, ptr, i64)

define %struct.M__MyStruct @"0000000000000101_M_fun_1_AcLtMspYikxikv"(i8 %par_1_u8, i1 %par_2_bool) !dbg !2 {
entry:
  %local_0 = alloca i8, align 1
  %local_1 = alloca i1, align 1
  %local_2__field1_u32 = alloca i32, align 4
  %local_3__field2_bool = alloca i1, align 1
  %local_4__dummy_field = alloca i1, align 1
  %local_5__field3_empty = alloca %struct.M__EmptyStruct, align 8
  %local_6__field4_u8 = alloca i8, align 1
  %local_7__field_combined_bool = alloca i1, align 1
  %local_8__field_u64 = alloca i64, align 8
  %local_9__field_combined_u64_struct = alloca %struct.M__U64Struct, align 8
  %local_10__field6_combined = alloca %struct.M__Combined, align 8
  %local_11 = alloca %struct.M__MyStruct, align 8
  store i8 %par_1_u8, ptr %local_0, align 1
  store i1 %par_2_bool, ptr %local_1, align 1
  store i32 15, ptr %local_2__field1_u32, align 4
  %load_store_tmp = load i1, ptr %local_1, align 1, !dbg !38
  store i1 %load_store_tmp, ptr %local_3__field2_bool, align 1, !dbg !38
  call void @llvm.dbg.declare(metadata ptr %local_1, metadata !39, metadata !DIExpression()), !dbg !38
  call void @llvm.dbg.declare(metadata ptr %local_3__field2_bool, metadata !41, metadata !DIExpression()), !dbg !38
  store i1 false, ptr %local_4__dummy_field, align 1
  %fv.0 = load i1, ptr %local_4__dummy_field, align 1
  %insert_0 = insertvalue %struct.M__EmptyStruct undef, i1 %fv.0, 0
  store %struct.M__EmptyStruct %insert_0, ptr %local_5__field3_empty, align 1
  %load_store_tmp1 = load i8, ptr %local_0, align 1, !dbg !43
  store i8 %load_store_tmp1, ptr %local_6__field4_u8, align 1, !dbg !43
  call void @llvm.dbg.declare(metadata ptr %local_0, metadata !44, metadata !DIExpression()), !dbg !43
  call void @llvm.dbg.declare(metadata ptr %local_6__field4_u8, metadata !46, metadata !DIExpression()), !dbg !43
  store i1 false, ptr %local_7__field_combined_bool, align 1
  store i64 1, ptr %local_8__field_u64, align 8
  %fv.02 = load i64, ptr %local_8__field_u64, align 8
  %insert_03 = insertvalue %struct.M__U64Struct undef, i64 %fv.02, 0
  store %struct.M__U64Struct %insert_03, ptr %local_9__field_combined_u64_struct, align 8
  %fv.04 = load i1, ptr %local_7__field_combined_bool, align 1
  %fv.1 = load %struct.M__U64Struct, ptr %local_9__field_combined_u64_struct, align 8
  %insert_05 = insertvalue %struct.M__Combined undef, i1 %fv.04, 0
  %insert_1 = insertvalue %struct.M__Combined %insert_05, %struct.M__U64Struct %fv.1, 1
  store %struct.M__Combined %insert_1, ptr %local_10__field6_combined, align 8
  %fv.06 = load i32, ptr %local_2__field1_u32, align 4
  %fv.17 = load i1, ptr %local_3__field2_bool, align 1
  %fv.2 = load %struct.M__EmptyStruct, ptr %local_5__field3_empty, align 1
  %fv.3 = load i8, ptr %local_6__field4_u8, align 1
  %fv.4 = load %struct.M__Combined, ptr %local_10__field6_combined, align 8
  %insert_08 = insertvalue %struct.M__MyStruct undef, i32 %fv.06, 0
  %insert_19 = insertvalue %struct.M__MyStruct %insert_08, i1 %fv.17, 1
  %insert_2 = insertvalue %struct.M__MyStruct %insert_19, %struct.M__EmptyStruct %fv.2, 2
  %insert_3 = insertvalue %struct.M__MyStruct %insert_2, i8 %fv.3, 3
  %insert_4 = insertvalue %struct.M__MyStruct %insert_3, %struct.M__Combined %fv.4, 4
  store %struct.M__MyStruct %insert_4, ptr %local_11, align 8
  %retval = load %struct.M__MyStruct, ptr %local_11, align 8
  ret %struct.M__MyStruct %retval
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!fun_1 = !{!2, !8, !9, !10}
!struct.M__EmptyStruct = !{!11}
!struct.M__U64Struct = !{!16}
!struct.M__Combined = !{!22}
!struct.M__MyStruct = !{!28}

!0 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !1, producer: "move-mv-llvm-compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!1 = !DIFile(filename: "dwarf-functions.move", directory: "/language/tools/move-mv-llvm-compiler/tests/dwarf-tests")
!2 = distinct !DISubprogram(name: "fun_1", linkageName: "fun_1", scope: !1, file: !1, line: 33, type: !3, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !7)
!3 = !DISubroutineType(types: !4)
!4 = !{!5, !6}
!5 = !DIBasicType(name: "u8", size: 8)
!6 = !DIBasicType(name: "bool", size: 8)
!7 = !{}
!8 = distinct !DILexicalBlock(scope: !2, file: !1, line: 5)
!9 = !DINamespace(name: "fun_1", scope: !1)
!10 = !DILocation(line: 33, column: 4, scope: !8)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "struct.M__EmptyStruct__ptr", baseType: !12, size: 64, align: 64, dwarfAddressSpace: 0)
!12 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__EmptyStruct", scope: !13, file: !1, line: 27, size: 8, align: 8, flags: DIFlagObjcClassComplete, elements: !14)
!13 = !DINamespace(name: "struct.M__EmptyStruct", scope: !1)
!14 = !{!15}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "dummy_field", scope: !13, file: !1, line: 27, baseType: !6, size: 1, align: 8)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "struct.M__U64Struct__ptr", baseType: !17, size: 64, align: 64, dwarfAddressSpace: 0)
!17 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__U64Struct", scope: !18, file: !1, line: 29, size: 64, align: 8, flags: DIFlagObjcClassComplete, elements: !19)
!18 = !DINamespace(name: "struct.M__U64Struct", scope: !1)
!19 = !{!20}
!20 = !DIDerivedType(tag: DW_TAG_member, name: "field_u64", scope: !18, file: !1, line: 29, baseType: !21, size: 64, align: 64)
!21 = !DIBasicType(name: "u64", size: 64)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "struct.M__Combined__ptr", baseType: !23, size: 64, align: 64, dwarfAddressSpace: 0)
!23 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__Combined", scope: !24, file: !1, line: 31, size: 128, align: 8, flags: DIFlagObjcClassComplete, elements: !25)
!24 = !DINamespace(name: "struct.M__Combined", scope: !1)
!25 = !{!26, !27}
!26 = !DIDerivedType(tag: DW_TAG_member, name: "field_combined_bool", scope: !24, file: !1, line: 31, baseType: !6, size: 1, align: 8)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "field_combined_u64_struct", scope: !24, file: !1, line: 32, baseType: !17, size: 64, align: 64, offset: 8)
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "struct.M__MyStruct__ptr", baseType: !29, size: 64, align: 64, dwarfAddressSpace: 0)
!29 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct.M__MyStruct", scope: !30, file: !1, line: 19, size: 192, align: 8, flags: DIFlagObjcClassComplete, elements: !31)
!30 = !DINamespace(name: "struct.M__MyStruct", scope: !1)
!31 = !{!32, !34, !35, !36, !37}
!32 = !DIDerivedType(tag: DW_TAG_member, name: "field1_u32", scope: !30, file: !1, line: 19, baseType: !33, size: 32, align: 32)
!33 = !DIBasicType(name: "u32", size: 32)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "field2_bool", scope: !30, file: !1, line: 20, baseType: !6, size: 1, align: 8, offset: 32)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "field3_empty", scope: !30, file: !1, line: 21, baseType: !12, size: 8, align: 8, offset: 40)
!36 = !DIDerivedType(tag: DW_TAG_member, name: "field4_u8", scope: !30, file: !1, line: 22, baseType: !5, size: 8, align: 8, offset: 48)
!37 = !DIDerivedType(tag: DW_TAG_member, name: "field6_combined", scope: !30, file: !1, line: 23, baseType: !23, size: 128, align: 64, offset: 56)
!38 = !DILocation(line: 37, column: 26, scope: !2)
!39 = !DILocalVariable(name: "load_store_/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move_37_par_2_bool", scope: !40, file: !1, line: 37, type: !6)
!40 = distinct !DILexicalBlock(scope: !2, file: !1, line: 37, column: 26)
!41 = !DILocalVariable(name: "load_store_/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move_37_par_2_bool", scope: !42, file: !1, line: 37, type: !6)
!42 = distinct !DILexicalBlock(scope: !2, file: !1, line: 37, column: 26)
!43 = !DILocation(line: 39, column: 24, scope: !2)
!44 = !DILocalVariable(name: "load_store_/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move_39_par_1_u8", scope: !45, file: !1, line: 39, type: !5)
!45 = distinct !DILexicalBlock(scope: !2, file: !1, line: 39, column: 24)
!46 = !DILocalVariable(name: "load_store_/language/tools/move-mv-llvm-compiler/tests/dwarf-tests/dwarf-functions.move_39_par_1_u8", scope: !47, file: !1, line: 39, type: !5)
!47 = distinct !DILexicalBlock(scope: !2, file: !1, line: 39, column: 24)
